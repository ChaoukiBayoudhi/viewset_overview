# Generated by Django 5.2 on 2025-04-18 10:35

import book_app.models
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Author",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("biography", models.TextField(blank=True, null=True)),
                ("birth_date", models.DateField(blank=True, null=True)),
            ],
            options={
                "db_table": "author",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Publisher",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("website", models.URLField(blank=True, null=True)),
                ("address", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "publisher",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Book",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("author", models.CharField(max_length=255)),
                ("published_date", models.DateField()),
                ("isbn", models.CharField(max_length=13, unique=True)),
                ("genre", models.CharField(max_length=100)),
                ("summary", models.TextField(blank=True, null=True)),
                ("page_count", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("EN", "English"),
                            ("FR", "French"),
                            ("ES", "Spanish"),
                            ("DE", "German"),
                            ("ZH", "Chinese"),
                            ("JA", "Japanese"),
                            ("AR", "Arabic"),
                        ],
                        default="EN",
                        max_length=2,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "cover_image",
                    models.ImageField(blank=True, null=True, upload_to="book_covers/"),
                ),
                (
                    "rating",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("is_bestseller", models.BooleanField(default=False)),
                (
                    "authors",
                    models.ManyToManyField(related_name="books", to="book_app.author"),
                ),
            ],
            options={
                "db_table": "book",
                "ordering": ["title"],
            },
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100,
                        validators=[
                            django.core.validators.MinLengthValidator(
                                2,
                                message="Category name must be at least 2 characters long",
                            ),
                            django.core.validators.RegexValidator(
                                message="Category name can only contain alphanumeric characters, spaces, and hyphens",
                                regex="^[A-Za-z0-9\\s\\-]+$",
                            ),
                            book_app.models.validate_no_special_chars,
                        ],
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "slug",
                    models.SlugField(
                        help_text="URL-friendly version of the category name",
                        max_length=120,
                        unique=True,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "display_order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Order in which category appears (0-1000)",
                        validators=[django.core.validators.MaxValueValidator(1000)],
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="subcategories",
                        to="book_app.category",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "categories",
                "db_table": "category",
                "ordering": ["display_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="BookCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("added_date", models.DateTimeField(auto_now_add=True)),
                (
                    "primary",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this is the primary category for the book",
                    ),
                ),
                (
                    "relevance_score",
                    models.FloatField(
                        default=5,
                        help_text="How relevant this category is to the book (0-10)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="book_app.book"
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="book_app.category",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "book categories",
                "db_table": "book_category",
                "ordering": ["-primary", "-relevance_score"],
            },
        ),
        migrations.AddField(
            model_name="book",
            name="categories",
            field=models.ManyToManyField(
                related_name="books",
                through="book_app.BookCategory",
                to="book_app.category",
            ),
        ),
        migrations.AddField(
            model_name="book",
            name="publisher",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="books",
                to="book_app.publisher",
            ),
        ),
        migrations.CreateModel(
            name="Review",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reviewer_name", models.CharField(max_length=255)),
                ("content", models.TextField()),
                (
                    "rating",
                    models.PositiveSmallIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="book_app.book",
                    ),
                ),
            ],
            options={
                "db_table": "review",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddConstraint(
            model_name="category",
            constraint=models.CheckConstraint(
                condition=models.Q(("id", models.F("parent")), _negated=True),
                name="prevent_self_parent",
            ),
        ),
        migrations.AddConstraint(
            model_name="bookcategory",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("relevance_score__gte", 0), ("relevance_score__lte", 10)
                ),
                name="relevance_score_range",
            ),
        ),
        migrations.AddConstraint(
            model_name="bookcategory",
            constraint=models.UniqueConstraint(
                condition=models.Q(("primary", True)),
                fields=("book",),
                name="unique_primary_category_per_book",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="bookcategory",
            unique_together={("book", "category")},
        ),
        migrations.AddIndex(
            model_name="book",
            index=models.Index(fields=["title"], name="book_title_e39da6_idx"),
        ),
        migrations.AddIndex(
            model_name="book",
            index=models.Index(fields=["author"], name="book_author_f8bd7b_idx"),
        ),
        migrations.AddIndex(
            model_name="book",
            index=models.Index(
                fields=["published_date"], name="book_publish_e6954b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="book",
            index=models.Index(fields=["isbn"], name="book_isbn_e93b35_idx"),
        ),
        migrations.AddIndex(
            model_name="book",
            index=models.Index(fields=["genre"], name="book_genre_15f232_idx"),
        ),
        migrations.AddIndex(
            model_name="book",
            index=models.Index(
                fields=["publisher", "is_bestseller"], name="book_publish_62a4ee_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="book",
            index=models.Index(fields=["language"], name="book_languag_ffd7ec_idx"),
        ),
        migrations.AddConstraint(
            model_name="book",
            constraint=models.UniqueConstraint(
                fields=("title", "author"), name="unique_book"
            ),
        ),
        migrations.AddConstraint(
            model_name="book",
            constraint=models.CheckConstraint(
                condition=models.Q(("isbn__regex", "^\\d{13}$")), name="isbn_length"
            ),
        ),
        migrations.AddConstraint(
            model_name="book",
            constraint=models.CheckConstraint(
                condition=models.Q(("rating__gte", 0), ("rating__lte", 5)),
                name="rating_range",
            ),
        ),
        migrations.AddConstraint(
            model_name="book",
            constraint=models.CheckConstraint(
                condition=models.Q(("price__gte", 0)), name="price_non_negative"
            ),
        ),
        migrations.AddConstraint(
            model_name="book",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("page_count__gte", 1),
                    ("page_count__isnull", True),
                    _connector="OR",
                ),
                name="page_count_positive",
            ),
        ),
        migrations.AddIndex(
            model_name="review",
            index=models.Index(
                fields=["book", "rating"], name="review_book_id_737468_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="review",
            index=models.Index(fields=["created_at"], name="review_created_de4c36_idx"),
        ),
        migrations.AddConstraint(
            model_name="review",
            constraint=models.CheckConstraint(
                condition=models.Q(("rating__gte", 1), ("rating__lte", 5)),
                name="review_rating_range",
            ),
        ),
    ]
